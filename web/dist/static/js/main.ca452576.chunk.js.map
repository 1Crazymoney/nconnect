{"version":3,"sources":["rpc.js","util.js","App.js","index.js"],"names":["rpcAddr","methods","getAdminToken","method","getAddrs","setAddrs","addAddrs","removeAddrs","getLocalIP","rpc","hasOwnProperty","addr","params","target","sources","source","Object","keys","key","undefined","util","defaultParams","rpcCall","a","axios","url","timeout","data","id","jsonrpc","response","error","result","acceptAddrs","adminAddrs","addrsToStr","addrs","join","strToAddrs","str","split","filter","s","length","App","props","state","adminTokenStr","adminTokenQRCode","localIP","handleAcceptAddrsChange","bind","handleAdminAddrsChange","handleSubmit","updateAdminToken","event","this","setState","value","preventDefault","alert","console","adminToken","JSON","stringify","QRCode","toDataURL","setInterval","then","catch","e","ipv4","className","Container","src","TextField","disabled","multiline","label","style","width","variant","onChange","Button","color","onClick","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca452576.chunk.js","sourcesContent":["'use strict';\n\nimport axios from 'axios';\n\nimport * as util from './util';\n\nconst rpcAddr = '/rpc/admin';\n\nconst methods = {\n  getAdminToken: { method: 'getAdminToken' },\n  getAddrs: { method: 'getAddrs' },\n  setAddrs: { method: 'setAddrs' },\n  addAddrs: { method: 'addAddrs' },\n  removeAddrs: { method: 'removeAddrs' },\n  getLocalIP: { method: 'getLocalIP' },\n}\n\nvar rpc = {};\nfor (let method in methods) {\n  if (methods.hasOwnProperty(method)) {\n    rpc[method] = (addr, params) => {\n      params = util.assignDefined({}, methods[method].defaultParams, params)\n      return rpcCall(addr, methods[method].method, params);\n    }\n  }\n}\n\nasync function rpcCall(addr, method, params = {}) {\n  let response = await axios({\n    url: addr,\n    method: 'POST',\n    timeout: 10000,\n    data: {\n      id: 'nkn-socks-web',\n      jsonrpc: '2.0',\n      method: method,\n      params: params,\n    },\n  });\n\n  let data = response.data;\n\n  if (data.error) {\n    throw data.error;\n  }\n\n  if (data.result !== undefined) {\n    return data.result;\n  }\n\n  throw 'rpc response contains no result or error field';\n}\n\nexport async function getAdminToken() {\n  return rpc.getAdminToken(rpcAddr);\n}\n\nexport async function getAddrs() {\n  return rpc.getAddrs(rpcAddr);\n}\n\nexport async function setAddrs(acceptAddrs, adminAddrs) {\n  let params = {};\n  if (acceptAddrs) {\n    params.acceptAddrs = acceptAddrs;\n  }\n  if (adminAddrs) {\n    params.adminAddrs = adminAddrs;\n  }\n  return rpc.setAddrs(rpcAddr, params);\n}\n\nexport async function addAddrs(acceptAddrs, adminAddrs) {\n  let params = {};\n  if (acceptAddrs) {\n    params.acceptAddrs = acceptAddrs;\n  }\n  if (adminAddrs) {\n    params.adminAddrs = adminAddrs;\n  }\n  return rpc.addAddrs(rpcAddr, params);\n}\n\nexport async function removeAddrs(acceptAddrs, adminAddrs) {\n  let params = {};\n  if (acceptAddrs) {\n    params.acceptAddrs = acceptAddrs;\n  }\n  if (adminAddrs) {\n    params.adminAddrs = adminAddrs;\n  }\n  return rpc.removeAddrs(rpcAddr, params);\n}\n\nexport async function getLocalIP() {\n  return rpc.getLocalIP(rpcAddr);\n}\n","'use strict';\n\nexport function assignDefined(target, ...sources) {\n  for (let source of sources) {\n    if (source) {\n      for (let key of Object.keys(source)) {\n        if (source[key] !== undefined) {\n          target[key] = source[key];\n        }\n      }\n    }\n  }\n  return target;\n}\n","import React from 'react';\nimport QRCode from 'qrcode';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\n\nimport * as rpc from './rpc';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      adminTokenStr: '',\n      adminTokenQRCode: '',\n      acceptAddrs: '',\n      adminAddrs: '',\n      localIP: [],\n    };\n    this.handleAcceptAddrsChange = this.handleAcceptAddrsChange.bind(this);\n    this.handleAdminAddrsChange = this.handleAdminAddrsChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.updateAdminToken = this.updateAdminToken.bind(this);\n  }\n\n  handleAcceptAddrsChange(event) {\n    this.setState({ acceptAddrs: event.target.value });\n  }\n\n  handleAdminAddrsChange(event) {\n    this.setState({ adminAddrs: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    try {\n      let addrs = await rpc.setAddrs(strToAddrs(this.state.acceptAddrs), strToAddrs(this.state.adminAddrs));\n      this.setState({\n        acceptAddrs: addrsToStr(addrs.acceptAddrs),\n        adminAddrs: addrsToStr(addrs.adminAddrs),\n      });\n      alert('Save success!');\n    } catch (e) {\n      console.error(e);\n      alert(e);\n    }\n  }\n\n  async updateAdminToken() {\n    try {\n      let adminToken = await rpc.getAdminToken();\n      if (adminToken) {\n        let adminTokenStr = JSON.stringify(adminToken);\n        let adminTokenQRCode = await QRCode.toDataURL(adminTokenStr);\n        this.setState({\n          adminTokenStr,\n          adminTokenQRCode,\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  componentDidMount() {\n    this.updateAdminToken();\n    setInterval(this.updateAdminToken, 5 * 60 * 1000);\n\n    rpc.getAddrs().then((addrs) => {\n      this.setState({\n        acceptAddrs: addrsToStr(addrs.acceptAddrs),\n        adminAddrs: addrsToStr(addrs.adminAddrs),\n      });\n    }).catch((e) => {\n      console.error(e);\n      alert(e);\n    });\n\n    rpc.getLocalIP().then((localIP) => {\n      this.setState({\n        localIP: localIP.ipv4,\n      });\n    }).catch((e) => {\n      console.error(e);\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Container>\n          <div>\n            <img\n              src={this.state.adminTokenQRCode}\n              />\n          </div>\n          <div>\n            <TextField\n              disabled\n              multiline\n              label=\"Local IP address\"\n              value={this.state.localIP.join('\\n')}\n              />\n          </div>\n          <div>\n            <TextField\n              disabled\n              multiline\n              label=\"Access key (expires in 5 minutes)\"\n              value={this.state.adminTokenStr}\n              style={{width: '100%'}}\n              />\n          </div>\n          <div>\n            <TextField\n              multiline\n              variant=\"filled\"\n              label=\"Accept addresses\"\n              value={this.state.acceptAddrs}\n              onChange={this.handleAcceptAddrsChange}\n              style={{width: '100%'}}\n              />\n          </div>\n          <div>\n            <TextField\n              multiline\n              variant=\"filled\"\n              label=\"Admins\"\n              value={this.state.adminAddrs}\n              onChange={this.handleAdminAddrsChange}\n              style={{width: '100%'}}\n              />\n          </div>\n          <div>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={this.handleSubmit}\n              >\n              Save\n            </Button>\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nfunction addrsToStr(addrs) {\n  if (!addrs) {\n    return '';\n  }\n  return addrs.join('\\n');\n}\n\nfunction strToAddrs(str) {\n  if (!str) {\n    return [];\n  }\n  return str.split('\\n').filter(s => s.length > 0);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'fontsource-roboto';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}